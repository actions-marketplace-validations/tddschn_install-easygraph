# https://github.com/tddschn/install-easygraph
# https://github.com/marketplace/actions/install-easygraph
name: 'Install EasyGraph'
description: 'Action that build and install python-easygraph from source (https://github.com/easy-graph/Easy-Graph)'
branding:
  icon: 'download-cloud'
  color: 'green'
inputs:
  cpp-binding-framework:  # id of input
    description: "The framework used to build easygraph's C++ binding"
    required: false
    default: "pybind11"
  # easygraph-checkout-path:
  #   default: "Easy-Graph"
  #   description: 'The path to checkout the Easy-Graph repository'
  #   required: false
  boost-version:
    default: "1.79.0"
    description: 'The version of boost to use'
    required: false
  use-cached-build:
    default: 'true'
    description: 'Use cached build if available'
    required: false
outputs:
  site-packages-path:
    description: python site-packages path
    value: '${{ steps.get-eg-install-location.outputs.site-packages-path }}'
  eg-egg-dir-path:
    description: easygraph egg directory path
    value: '${{ steps.get-eg-install-location.outputs.eg-egg-dir-path }}'

runs:
  using: "composite"
  steps:
    - name: Print action inputs
      shell: bash
      run: |
        echo '::group::Action Inputs'
        echo '${{ toJSON(inputs) }}'
        echo '::endgroup::'
        

    - name: Choosing a branch based on the cpp-binding-framework input
      shell: python
      id: choose-branch
      run: |
        cpp_binding_framework = '${{ inputs.cpp-binding-framework }}'
        if cpp_binding_framework == 'pybind11':
            branch = 'pybind11'
        else:
            branch = 'master'
        print('branch: ' + branch)
        # print('::set-output name=branch::' + branch)
        # append it to $GITHUB_ENV file, using python
        import os
        github_env_file = os.environ['GITHUB_ENV']
        with open(github_env_file, 'a') as f:
            f.write('BRANCH=' + branch.strip() + '\n')
    - name: Getting the SHA1 of the latest commit of the EasyGraph repository
      shell: bash
      id: 'get-sha1'
      run: |
        echo '::group::Getting the SHA1 of the latest commit of the EasyGraph repository'
        echo "branch: ${{ env.BRANCH }}"
        SHA1="$(git ls-remote https://github.com/easy-graph/Easy-Graph '${{ env.BRANCH }}' | awk '{ print $1 }')"
        echo "SHA1: $SHA1"
        # echo "::set-output name=SHA1::$SHA1"
        echo "EG_SHA1=$SHA1" >> $GITHUB_ENV
        echo '::endgroup::'

    - name: Create a temporary dir for checking out easygraph and tddschn/install-easygraph
      id: tempdir
      run: |
        echo '::group::Creating temp dir'
        EG_TMP_DIR="$(mktemp --directory)"
        EG_TMP_DIR_RELATIVE="$(echo "${EG_TMP_DIR}" | cut -c2-)"
        ACTION_TMP_DIR="$(mktemp --directory)"
        ACTION_TMP_DIR_RELATIVE="$(echo "${ACTION_TMP_DIR}" | cut -c2-)"
        echo "EG_TMP_DIR: $EG_TMP_DIR"
        echo "ACTION_TMP_DIR: $ACTION_TMP_DIR"
        echo "::set-output name=tmp-dir::$EG_TMP_DIR_RELATIVE"
        echo "::set-output name=action-tmp-dir::$ACTION_TMP_DIR_RELATIVE"
        echo "::set-output name=action-tmp-dir-absolute::$ACTION_TMP_DIR"
        echo 'moving temp dirs under workspace'
        mkdir -p -v "$GITHUB_WORKSPACE/tmp"
        mv -v "$EG_TMP_DIR" "$GITHUB_WORKSPACE/tmp"
        mv -v "$ACTION_TMP_DIR" "$GITHUB_WORKSPACE/tmp"
        echo '::endgroup::'
      shell: bash

    - name: Checkout tddschn/install-easygraph
      uses: actions/checkout@v3
      with:
        path: '${{ steps.tempdir.outputs.action-tmp-dir }}'
    
    - name: Get eg installation location
      # working dir has no effect
      # working-directory: '${{ steps.tempdir.outputs.action-tmp-dir }}'
      shell: python
      id: get-eg-install-location
      run: |
        import sys, os
        from pathlib import Path
        from base64 import b64encode
        action_dir = '${{ github.workspace }}/${{ steps.tempdir.outputs.action-tmp-dir}}'
        # print(f'{action_dir=}') # invalid syntax before py38
        print(f'action_dir: {action_dir}')
        print(list(os.listdir(action_dir)))
        sys.path.insert(0, action_dir)
        from utils import get_eg_egg_dir_path, set_output, get_site_packages_path
        eg_egg_dir_path= get_eg_egg_dir_path('${{ env.EG_SHA1 }}')
        set_output('site-packages-path', get_site_packages_path())
        set_output('eg-egg-dir-path', eg_egg_dir_path)
        set_output('python-version', sys.version)
        set_output('python-version-b64', b64encode(sys.version.encode()).decode())
        
      
    - name: Using cache on eg installation dir (egg)
      uses: actions/cache@v3
      id: cache
      with:
        key: 'eg-commit-sha1-${{ env.EG_SHA1 }}@python-version-b64${{ steps.get-eg-install-location.outputs.python-version-b64 }}'
        path: |
          ${{ steps.get-eg-install-location.outputs.eg-egg-dir-path }}

    - name: Append eg egg dir to site-packages on cache hit
      if: "steps.cache.outputs.cache-hit == 'true'"
      shell: python
      run: |
        print('::group::Appending eg egg dir to site-packages')
        import sys, os
        action_dir = '${{ github.workspace }}/${{ steps.tempdir.outputs.action-tmp-dir}}'
        sys.path.insert(0, action_dir)
        from utils import append_eg_egg_dir_rel_path_to_easy_install_pth
        append_eg_egg_dir_rel_path_to_easy_install_pth('${{ env.EG_SHA1 }}')
        print('::endgroup::')
        

    - name: checkout Easy-Graph master branch
      if: "inputs.use-cached-build != 'true' || steps.cache.outputs.cache-hit != 'true' && inputs.cpp-binding-framework == 'boost-python'"
      uses: actions/checkout@v3
      with:
        repository: easy-graph/Easy-Graph
        # path: ${{ inputs.easygraph-checkout-path }}
        # uses tmp-dir
        path: ${{ steps.tempdir.outputs.tmp-dir }}
        ref: 'master'

    - name: checkout Easy-Graph pybind11 branch
      if: "inputs.use-cached-build != 'true' || steps.cache.outputs.cache-hit != 'true' && inputs.cpp-binding-framework == 'pybind11'"
      uses: actions/checkout@v3
      with:
        repository: easy-graph/Easy-Graph
        # path: ${{ inputs.easygraph-checkout-path }}
        path: ${{ steps.tempdir.outputs.tmp-dir }}
        ref: 'pybind11'
    # - run: |
    #     echo '::endgroup::'
    #   shell: bash

    - name: install easygraph dependencies (prior to setup.py)
      # if: "inputs.use-cached-build != 'true' || steps.cache.outputs.cache-hit != 'true'"
      shell: bash
      run: |          
        echo '::group::Installing dependencies (prior to setup.py)'
        pip install pytest
        pip install Pillow
        pip install kiwisolver
        pip install gensim
        pip install lxml 
        echo '::endgroup::'

    - name: install remaining easygraph dependencies
      # if: "inputs.use-cached-build != 'true' || steps.cache.outputs.cache-hit != 'true'"
      shell: bash
      run: |          
        echo '::group::Installing remaining dependencies'
        pip install numpy pandas matplotlib statsmodels
        pip install tqdm joblib six scikit-learn tensorflow
        pip install scipy progressbar progressbar33
        pip install nose
        echo '::endgroup::'

    - name: "prepping for building easygraph's cpp binding (pybind11)"
      if: "inputs.use-cached-build != 'true' || steps.cache.outputs.cache-hit != 'true' && inputs.cpp-binding-framework == 'pybind11'"
      shell: bash
      # working-directory: ${{ inputs.easygraph-checkout-path }}
      working-directory: '${{ steps.tempdir.outputs.tmp-dir }}'
      id: prepping-for-building-pybind11
      run: |          
        echo '::group::prepping for building easygraph'"'"'s cpp binding (pybind11)'
        pip install pybind11
        echo '::endgroup::'

    - name: "build easygraph's cpp binding (pybind11)"
      if: "inputs.use-cached-build != 'true' || steps.cache.outputs.cache-hit != 'true' && inputs.cpp-binding-framework == 'pybind11'"
      shell: bash
      # working-directory: ${{ inputs.easygraph-checkout-path }}
      working-directory: '${{ steps.tempdir.outputs.tmp-dir }}'
      id: build-pybind11
      run: |          
        echo '::group::building easygraph'"'"'s cpp binding (pybind11)'
        python setup.py build_ext
        echo '::endgroup::'

    - name: "prepping for building easygraph's cpp binding (boost-python)"
      if: "inputs.use-cached-build != 'true' || steps.cache.outputs.cache-hit != 'true' && inputs.cpp-binding-framework == 'boost-python'"
      shell: bash
      env:
        BOOST_VERSION: ${{ inputs.boost-version }}
      working-directory: '${{ steps.tempdir.outputs.tmp-dir }}'
      id: prepping-for-building-boost-python
      run: |          
        echo '::group::Getting and formatting python and boost versions'
        PYTHON_VERSION="$(python -V | cut -d' ' -f2 | cut -d'.' -f1-2)"
        PYTHON_VERSION_ABBR=${PYTHON_VERSION//./}
        BOOST_VERSION_ALIAS=boost_${BOOST_VERSION//./_}
        echo '::endgroup::'

        echo '::group::Versions info'
        echo "PYTHON_VERSION: ${PYTHON_VERSION}"
        echo "PYTHON_VERSION_ABBR: ${PYTHON_VERSION_ABBR}"
        echo "BOOST_VERSION: ${BOOST_VERSION}"
        echo "BOOST_VERSION_ALIAS: ${BOOST_VERSION_ALIAS}"
        echo '::endgroup::'

        echo '::group::Install build dependencies with apt-get'
        sudo apt-get update
        sudo apt-get install gcc -y
        sudo apt-get install g++ -y
        echo '::endgroup::'

        echo '::group::Downloading and extracting boost'
        wget https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/${BOOST_VERSION_ALIAS}.tar.gz
        tar -xf ${BOOST_VERSION_ALIAS}.tar.gz
        echo '::endgroup::'

        echo '::group::Building boost and boost-python'
        cd ${BOOST_VERSION_ALIAS}
        ./bootstrap.sh --with-python=python
        sudo ./b2 cxxflags="-fPIC" install --with-python
        
        sudo ln -s /usr/local/lib/libboost_python${PYTHON_VERSION_ABBR}.a /usr/local/lib/libboost_python.a

        echo '::endgroup::'

    - name: "build easygraph's cpp binding (boost-python)"
      if: "inputs.use-cached-build != 'true' || steps.cache.outputs.cache-hit != 'true' && inputs.cpp-binding-framework == 'boost-python'"
      shell: bash
      env:
        BOOST_VERSION: ${{ inputs.boost-version }}
      working-directory: '${{ steps.tempdir.outputs.tmp-dir }}'
      id: build-boost-python
      run: |          
        # echo '::group::Running build_ext'
        echo '::group::build easygraph'"'"'s cpp binding (boost-python)'
        python setup.py build_ext -l boost_python -L "/usr/local/lib" -I "/usr/local/include"
        echo '::endgroup::'

    - name: "install easygraph"
      if: "inputs.use-cached-build != 'true' || steps.cache.outputs.cache-hit != 'true'"
      shell: bash
      env:
        BOOST_VERSION: ${{ inputs.boost-version }}
      working-directory: '${{ steps.tempdir.outputs.tmp-dir }}'
      run: |          
        echo '::group::Installing easygraph'
        python setup.py install
        echo '::endgroup::'

    - name: Test easygraph installation
      shell: python
      run: |          
        print('::group::Testing easygraph installation')

        try:
            import easygraph as eg
            import cpp_easygraph as ceg
            print(f'eg: {eg}')
            print(f'ceg: {ceg}')
        except ModuleNotFoundError as e:
            import os
            from pathlib import Path
            site_packages_path = '${{ steps.get-eg-install-location.outputs.site-packages-path }}'
            eg_egg_dir_path = '${{ steps.get-eg-install-location.outputs.eg-egg-dir-path }}'
            print(f'site_packages_path: {site_packages_path}')
            print(f'eg_egg_dir_path: {eg_egg_dir_path}')
            print('dir listing of site_packages_path:')
            print(os.listdir(site_packages_path))
            print('dir listing of eg_egg_dir_path:')
            print(os.listdir(eg_egg_dir_path))
            raise e

        print('::endgroup::')
    
    - name: Remove temp dirs
      if: ${{ always() }}
      run: |
        echo '::group::Removing temp dir'
        if [[ -d '$GITHUB_WORKSPACE/tmp' ]]; then
          sudo rm -rf "$GITHUB_WORKSPACE/tmp"
        fi
        echo '::endgroup::'
      shell: bash
      
