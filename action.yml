# https://github.com/tddschn/install-easygraph
# https://github.com/marketplace/actions/install-easygraph
name: 'Install EasyGraph'
description: 'Action that build and install python-easygraph from source (https://github.com/easy-graph/Easy-Graph)'
branding:
  icon: 'download-cloud'
  color: 'green'
inputs:
  cpp-binding-framework:  # id of input
    description: "The framework used to build easygraph's C++ binding"
    required: false
    default: "pybind11"
  # easygraph-checkout-path:
  #   default: "Easy-Graph"
  #   description: 'The path to checkout the Easy-Graph repository'
  #   required: false
  boost-version:
    default: "1.79.0"
    description: 'The version of boost to use'
    required: false

runs:
  using: "composite"
  steps:
    - name: Create a temporary dir for checking out
      id: tempdir
      run: |
        echo '::group::Creating temp dir'
        EG_TMP_DIR="$(mktemp --directory)"
        EG_TMP_DIR_RELATIVE="$(echo "${EG_TMP_DIR}" | cut -c2-)"
        echo "EG_TMP_DIR: $EG_TMP_DIR"
        echo "::set-output name=tmp-dir::$EG_TMP_DIR_RELATIVE"
        echo 'moving temp dir under workspace'
        mkdir -p -v "$GITHUB_WORKSPACE/tmp"
        mv -v "$EG_TMP_DIR" "$GITHUB_WORKSPACE/tmp"
        echo '::endgroup::'
      shell: bash
    - name: checkout Easy-Graph master branch
      if: inputs.cpp-binding-framework == 'boost-python'
      uses: actions/checkout@v3
      with:
        repository: easy-graph/Easy-Graph
        # path: ${{ inputs.easygraph-checkout-path }}
        # uses tmp-dir
        path: ${{ steps.tempdir.outputs.tmp-dir }}
        ref: 'master'

    - name: checkout Easy-Graph pybind11 branch
      if: inputs.cpp-binding-framework == 'pybind11'
      uses: actions/checkout@v3
      with:
        repository: easy-graph/Easy-Graph
        # path: ${{ inputs.easygraph-checkout-path }}
        path: ${{ steps.tempdir.outputs.tmp-dir }}
        ref: 'pybind11'
    # - run: |
    #     echo '::endgroup::'
    #   shell: bash

    - name: install easygraph common dependencies
      shell: bash
      run: |          
        echo '::group::Installing common dependencies'
        pip install pytest
        pip install Pillow
        pip install kiwisolver
        pip install gensim
        pip install lxml
        echo '::endgroup::'

    - name: "prepping for building easygraph's cpp binding (pybind11)"
      if: inputs.cpp-binding-framework == 'pybind11'
      shell: bash
      # working-directory: ${{ inputs.easygraph-checkout-path }}
      working-directory: '${{ steps.tempdir.outputs.tmp-dir }}'
      id: prepping-for-building-pybind11
      run: |          
        echo '::group::prepping for building easygraph\'s cpp binding (pybind11)'
        pip install pybind11
        echo '::endgroup::'

    - name: "build easygraph's cpp binding (pybind11)"
      if: inputs.cpp-binding-framework == 'pybind11'
      shell: bash
      # working-directory: ${{ inputs.easygraph-checkout-path }}
      working-directory: '${{ steps.tempdir.outputs.tmp-dir }}'
      id: build-pybind11
      run: |          
        echo '::group::building easygraph\'s cpp binding (pybind11)'
        python setup.py build_ext
        echo '::endgroup::'

    - name: "prepping for building easygraph's cpp binding (boost-python)"
      if: inputs.cpp-binding-framework == 'boost-python'
      shell: bash
      env:
        BOOST_VERSION: ${{ inputs.boost-version }}
      working-directory: '${{ steps.tempdir.outputs.tmp-dir }}'
      id: prepping-for-building-boost-python
      run: |          
        PYTHON_VERSION="$(python -V | cut -d' ' -f2 | cut -d'.' -f1-2)"
        PYTHON_VERSION_ABBR=${PYTHON_VERSION//./}
        BOOST_VERSION_ALIAS=boost_${BOOST_VERSION//./_}

        echo '::group::Versions info'
        echo "PYTHON_VERSION: ${PYTHON_VERSION}"
        echo "PYTHON_VERSION_ABBR: ${PYTHON_VERSION_ABBR}"
        echo "BOOST_VERSION: ${BOOST_VERSION}"
        echo "BOOST_VERSION_ALIAS: ${BOOST_VERSION_ALIAS}"
        echo '::endgroup::'

        echo '::group::Install build dependencies with apt-get'
        sudo apt-get update
        sudo apt-get install gcc -y
        sudo apt-get install g++ -y
        echo '::endgroup::'

        echo '::group::Downloading and extracting boost'
        wget https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/${BOOST_VERSION_ALIAS}.tar.gz
        tar -xf ${BOOST_VERSION_ALIAS}.tar.gz
        echo '::endgroup::'

        echo '::group::Building boost and boost-python'
        cd ${BOOST_VERSION_ALIAS}
        ./bootstrap.sh --with-python=python
        sudo ./b2 cxxflags="-fPIC" install --with-python
        
        sudo ln -s /usr/local/lib/libboost_python${PYTHON_VERSION_ABBR}.a /usr/local/lib/libboost_python.a

        echo '::endgroup::'

    - name: "build easygraph's cpp binding (boost-python)"
      if: inputs.cpp-binding-framework == 'boost-python'
      shell: bash
      env:
        BOOST_VERSION: ${{ inputs.boost-version }}
      working-directory: '${{ steps.tempdir.outputs.tmp-dir }}'
      id: build-boost-python
      run: |          
        # echo '::group::Running build_ext'
        echo '::group::build easygraph\'s cpp binding (boost-python)'
        python setup.py build_ext -l boost_python -L "/usr/local/lib" -I "/usr/local/include"
        echo '::endgroup::'

    - name: "install easygraph"
      shell: bash
      env:
        BOOST_VERSION: ${{ inputs.boost-version }}
      working-directory: '${{ steps.tempdir.outputs.tmp-dir }}'
      run: |          
        echo '::group::Installing easygraph'
        python setup.py install
        echo '::endgroup::'

    - name: Test easygraph installation
      shell: python
      run: |          
        print('::group::Testing easygraph installation')
        import easygraph as eg
        import cpp_easygraph as ceg
        print('::endgroup::')
    
    - name: Remove temp dir
      if: ${{ always() }}
      run: |
        echo '::group::Removing temp dir'
        # using -v adds 20k lines of log
        # rm -rfv '${{ steps.tempdir.outputs.tmp-dir }}'
        if [[ -d '${{ steps.tempdir.outputs.tmp-dir }}' ]]; then
          sudo rm -rf '${{ steps.tempdir.outputs.tmp-dir }}'
        fi
        if [[ -d '$GITHUB_WORKSPACE/tmp' ]]; then
          sudo rm -rf "$GITHUB_WORKSPACE/tmp"
        fi
        echo '::endgroup::'
      shell: bash
      

